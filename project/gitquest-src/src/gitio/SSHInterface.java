package gitio;

import java.io.File;

import org.eclipse.jgit.errors.UnsupportedCredentialItem;
import org.eclipse.jgit.transport.CredentialItem;
import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.CredentialsProviderUserInfo;
import org.eclipse.jgit.transport.JschConfigSessionFactory;
import org.eclipse.jgit.transport.OpenSshConfig;
import org.eclipse.jgit.transport.OpenSshConfig.Host;
import org.eclipse.jgit.transport.SshSessionFactory;
import org.eclipse.jgit.transport.URIish;
import org.eclipse.jgit.util.FS;

import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.UserInfo;

/**
 * This class handles the creation and distribution of private ssh-keys used to
 * push to git repositories.
 */
public class SSHInterface {
	/**
	 * This stores the path to the file containing the ssh id used to identify
	 * logins.
	 */
	private File sshid;
	/** Keeps track of the ssh key in a way that GitInterface can use. */

	SSHInterface() {
		setID(new File(System.getProperty("user.home") + "/.ssh/id_rsa"));
	}

	/**
	 * Sets the user's ssh id to be the one in the file given, as would have
	 * been generated by the ssh-keygen tool.
	 */
	public void setID(final File id) {
		this.sshid = id;
		JschConfigSessionFactory sessionFactory = new JschConfigSessionFactory() {
			
			@Override
			protected JSch getJSch(Host arg0, FS arg1) throws JSchException {
				JSch jsch = new JSch();
				try {
					jsch.addIdentity(id.getAbsolutePath());
				} catch (JSchException e) {
					e.printStackTrace();
				}
				return jsch;
			}

			@Override
		    protected void configure(OpenSshConfig.Host host, Session session) {
		        session.setConfig("StrictHostKeyChecking", "yes");
		    }
		};
		SshSessionFactory.setInstance(sessionFactory);
	}
}