package gitio;

import java.io.File;

import org.eclipse.jgit.transport.JschConfigSessionFactory;
import org.eclipse.jgit.transport.OpenSshConfig;
import org.eclipse.jgit.transport.OpenSshConfig.Host;
import org.eclipse.jgit.transport.SshSessionFactory;
import org.eclipse.jgit.util.FS;

import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

/**
 * This class handles the use of private ssh-keys used to push to git
 * repositories.
 */
public class SSHInterface {

	/**
	 * Creates an SSHInterface using the default ssh id file. An alternative
	 * file can be specified with setID().
	 * 
	 * @author NaOH
	 * @version 0.0.1
	 */
	SSHInterface() {
		setID(new File(System.getProperty("user.home") + "/.ssh/id_rsa"));
	}

	/**
	 * Sets the user's ssh id to be the one in the file given, as would have
	 * been generated by the ssh-keygen tool.
	 * 
	 * @author NaOH
	 * @version 0.0.1
	 * @param id
	 *            is a path to a file containing the ssh key.
	 */
	public void setID(final File id) {
		/*
		 * The sessionFactory modifies the security details used by all SSH
		 * connections. This includes calls made by GitInterface. Unfortunately,
		 * this is JVM-wide behaviour. Ideally, this could be contained to a
		 * single instance of GitInterface, but alas, JGit's ideology is not
		 * that of this project.
		 */
		JschConfigSessionFactory sessionFactory = new JschConfigSessionFactory() {

			@Override
			protected JSch getJSch(Host hc, FS fs) throws JSchException {
				JSch jsch = super.createDefaultJSch(fs);
				try {
					jsch.addIdentity(id.getAbsolutePath());
				} catch (JSchException e) {
					e.printStackTrace();
				}
				return jsch;
			}

			@Override
			protected void configure(OpenSshConfig.Host host, Session session) {
				/*
				 * This negates the need to have a known_hosts file, which is
				 * pointless (and logistically tricky) to generate.
				 */
				session.setConfig("StrictHostKeyChecking", "false");
			}
		};
		SshSessionFactory.setInstance(sessionFactory);
	}
}